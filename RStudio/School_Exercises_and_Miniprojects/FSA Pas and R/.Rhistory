2+2
3*4
1/3  # R as standard has more digits than it shows
pi
sqrt(2)
a = 34+45 # Can also use <- instead of =
a
c(1,5,-4)
v = c(2,3,-5); v  # Several commands on one line is separated with semi-colon
w = 1:3; w  # Colon is used for sequences of numbers
v+w  # Adding vectors
v[2]  # Extracting element 2 of v
v[2:3] # Extracting element 2 and 3 of v
c(v,w) # Easy to join vectors into a long vector
A = matrix(1:9,3,3); A  # Written by column
B = matrix(1:9,3,3,byrow=TRUE); B  # Written by row
A[2,2]  # entry [2,2]
A[,2]  # column 2
A[2,]  # row 2
A[2,]  # Row 2
A+B  # fine for matrix sum
A*B  # not a proper matrix product - elementwise product
A^{-1}  # not proper inverse - elementwise inverse
exp(A) # again the exponential function is used on each entry
A%*%B  # matrix product
solve(A)  # matrix inverse - but this matrix is not invertible
A[3,3] = 0; A  # changing element at entry [3,3] in matrix
A %*% solve(A)  # checking whether this is really the inverse - not exactly the identity matrix due to numerical calculations
solve(A)  # now it is invertible
round(A %*% solve(A))  # looks nicer rounded
?matrix
?exp
?solve
rm(list=ls())  # careful: removes everything without asking
x = c(1,1,1,1,1); x; y = c(1,2,3,4,5); y; z = c(1^2,2^2,3^2,4^2,5^2); z
X = matrix(c(x,y,z), 5:3); X
X^t;
?transpose
t(X)
X%*%solve(t(X)%*%X)%*%t(X)
Y = t(X)%*%X
Z = X%*%solve(Y)
Q = Z%*%t(X); Z
rm(list=ls())  # careful: removes everything without asking
x = c(1,1,1,1,1); x; y = c(1,2,3,4,5); y; z = c(1^2,2^2,3^2,4^2,5^2); z
X = matrix(c(x,y,z), 5:3); X
X%*%solve(t(X)%*%X)%*%t(X)
w = c(1,4,5,6); w
q = C(2,3,4); q
w+q
t = C(2,3,4); t
u = C(2,3,4); u
q = c(2,3,4); q
w+q
t = w+q; t
X = matrix(c(x,y,z), 5:3); X
rm(list=ls())
?solve
S = matrix(h, o, p, byrow = true, 3:4); S
h = c(x, -2*y, z, 0)
o = c(0, 2*y, -8*z, 8)
p = c(-4*x, 5*y, 9*z, -9)
S = matrix(h, o, p, byrow = true, 3:4); S
solve(S)
S = matrix(c(x, -2*y, z), c(0, 2*y, -8*z), c(-4*x, 5*y, 9*z), byrow = true, 3:3); S
solve(S, c(0,8,-9))
solve(matrix(c(x, -2*y, z), c(0, 2*y, -8*z), c(-4*x, 5*y, 9*z), byrow = true, 3:3), c(0,8,-9))
x = c(1,1,1,1,1); x; y = c(1,2,3,4,5); y; z = c(1^2,2^2,3^2,4^2,5^2); z
X = matrix(c(x,y,z),5:3); X
X%*%solve(t(X)%*%X)%*%t(X)
w = c(1,4,5,6); w
q = c(2,3,4); q
t = w+q; t
solve(matrix(c(x, -2*y, z), c(0, 2*y, -8*z), c(-4*x, 5*y, 9*z), byrow = true, 3:3), c(0,8,-9))
x = scan("data1.dat"); x  # note: make sure that you are in the correct working directory
rm(list=ls())  # careful: removes everything without asking
x = c(1,1,1,1,1); x; y = c(1,2,3,4,5); y; z = c(1^2,2^2,3^2,4^2,5^2); z
X = matrix(c(x,y,z),5:3); X
X%*%solve(t(X)%*%X)%*%t(X)
w = c(1,4,5,6); w
q = c(2,3,4); q
t = w+q; t
solve(matrix(c(x, -2*y, z), c(0, 2*y, -8*z), c(-4*x, 5*y, 9*z), byrow = true, 3:3), c(0,8,-9))
rm(list=ls())
solve(matrix(c(x, -2*y, z), c(0, 2*y, -8*z), c(-4*x, 5*y, 9*z), byrow = true, 3:3), c(0,8,-9))
solve(matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), byrow = true, 3:3), c(0,8,-9))
solve(matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), byrow = TRUE, 3:3), c(0,8,-9))
solve(matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), byrow = TRUE, 3,3), c(0,8,-9))
C  = matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), byrow = TRUE, 3,3)
C  = matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), byrow = TRUE, 3:3)
C  = matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), 3:3, byrow = TRUE)
C  = matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), 3:3)
C  = matrix(c(1, -2, 1), c(0, 2, -8), c(-4, 5, 9), byrow = TRUE); C
C  = matrix(c(1,-2,1,0,2,-8,-4,5,9), 3:3, byrow = TRUE); C
v = c(0,8,-9)
solve(C,v)
C %*% V
C  = matrix(c(1,-2,1,0,2,-8,-4,5,9), 3:3, byrow = TRUE); C
v = c(0,8,-9)
V = solve(C,v)
C %*% V
rm(list=ls())
x = scan("data1.dat"); x  # note: make sure that you are in the correct working directory
data.frame(1:4,5:2,c(1,3,4,7))  # vectors get a row each
data.frame(height=c(178,182,171),weight=c(72,76,71))  # the columns can be given meaningful names
y=data.frame(student=c("Allan","Barney","Christian"),score=c(34,36,43));y  # can contain letters/words
y[,2]  # same extraction notation as matrices
y$score  # or use $ with column name
names(y)  # names() can be used for checking the content of a complex object that can be extracted with $
z = read.table("data2.dat"); z
class(z)  # a data frame
class(z$V1)  # a vector
class(z$V2)  # a vector of integers
class(z$V3)  # a factor is a vector of categories - we'll get back to this later
class(z$V4)
View(y)
View(z)
as.character(z$V4)  # changing factor to characters of strings
class(as.character(z$V4))  # now the class has changed
z$V4 = as.character(z$V4) # saving into data
class(z$V4)  # yup - class has changed in the data frame now
a = c(4,5,6); a
b = as.factor(a); b
as.numeric(b) # oops - numbers are just the numbers of the categories in some order
as.numeric(as.character(a))  # better
is.numeric(z$V1)
is.numeric(z$V2)  # integers are also numeric
is.numeric(z$V3)
library(help = "datasets")  # we'll get back to the library command later
library(help = "datasets")  # we'll get back to the library command later
cars
?cars
plot(cars$speed,cars$dist)
plot(cars$dist~cars$speed)  # the same, ~ means "as function of", note different order
plot(cars$speed,cars$dist,pch=3,col="red",type="b")  # many things can be controlled in plot
plot(cars)  # complex objects can also be put into plot - what it does depends on the object
plot(cars$speed,cars$dist) # Scatter plot
plot(cars$dist~cars$speed)  # the same, ~ means "as function of", note different order
plot(cars$speed,cars$dist,pch=3,col="red",type="b")  # many things can be controlled in plot
plot(cars)  # complex objects can also be put into plot - what it does depends on the object
lines(cars$speed,cars$dist)
points(cars$speed,cars$dist,col="red",pch=5)
x = cars$speed;x
y = cars$dist; y
hist(x)  # histogram
hist(x, breaks=10)  # good for getting an overview of data
boxplot(x)  # boxplot contains 25,50,75 % quantiles, and whiskers
boxplot(c(x,-7,4,44))  # changing data a bit - boxplot reveals potential outliers
boxplot(x,y)  # good for comparing data (here it is of course meaningless)
mean(x)  # average
median(x)  # median
var(x)  # variance
sd(x)  # standard deviation
quantile(x)  # Kvantiler
range(x)  # Range
summary(x)  # can be used for most objects in R
rm(list=ls())
airquality
?airquality
plot(a)
a = airquality; a
plot(a)
plot(a$temperature~a$ozone)
plot(a$ozone~a$temperature)
plot(a$ozone,a$temperature)
View(a)
plot(a$ozone,a$temperature, xlim = 154, ylim = 154)
plot(a$ozone,a$temperature)
?plot.default
plot(a$ozone,a$temperature)
plot(a$ozone,a$temperature, xlim = 40, ylim = 20)
plot(a$ozone,a$temperature, xlim = 1, ylim = 20)
plot(a)
a = airquality; a
plot(a$ozone,a$temperature)
plot(a$ozone,a$temperature)
plot(a$ozone,a$Temp)
plot(a$Ozone,a$Temp)
plot(a$Ozone,a$Temp, xlab = Ozone, ylab = Temperature)
plot(a$Ozone,a$Temp)
plot(a$Ozone,a$Temp, xlab =  Ozone, ylab = Temperature)
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature")
?plot.default
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = 70)
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", frame.plot = 70)
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature")
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", frame.plot = 70)
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = 70,80)
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = (70,80)
# f) Try plot(airquality$Ozone). What does it do? Change the scatter plot to a plot joining the measurements with line segments.
# (hint: check the argument type in the help page for plot (not plot.default))
# g) Make a histogram and a boxplot of the Ozone level.
### II)
# a) Read the data data3.dat using read.table.
# (note: this file contains names of each column, so you need to find out how to import headers)
# b) Make some plots to investigate the data, as well as some non-graphical summaries.
################################################## PART 3: distributions in R ################################################
### R can be used for calculating density functions and distribution functions of most known distributions
dnorm(1,mean=0,sd=1)  # density function for normal dist. with mean 3 and sd 5 evaluated at 1
pnorm(1,mean=0,sd=1)  # distribution function
### let's plot them - the curve function is useful for plotting mathematical functions in R
curve(dnorm(x, mean=0, sd=1),from=-5,to=5)  # x must be called x in curve
curve(pnorm(x, mean=0, sd=1),from=-5,to=5)
### the inverse distribution function
qnorm(0.8,mean=0,sd=1)
### R can also simulate the distributions
rnorm(5,mean=0,sd=1)  # 5 simulations
hist(rnorm(1000,mean=0,sd=1))  # histogram of 1000 simulations
### function for handling distribution come with the following naming convention:
### first part: d = density function, p = distribution function, q = inverse distribution function, r = simulate
### last part: distribution name, e.g. norm = normal, exp = exponential, gamma = gamma, t = t, binom = binomial, etc.
curve(dgamma(x,shape = 3,rate=0.5),from=0,to=20)
### clean-up
rm(list=ls())
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = (70,80))
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = (70-80))
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = c(70-80))
plot(a)
plot(a$Ozone,a$Temp)
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature")
?plot.default
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = c(70-80))
a = airquality; a
?airquality
plot(a)
plot(a$Ozone,a$Temp)
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature")
?plot.default
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = c(70-80))
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = (70-80))
plot(a$Ozone,a$Temp, xlab =  "Ozone" , ylab = "Temperature", xlim = range(70:80))
plot(a$Ozone)
plot(a$Ozone, pch=3,col="red",type="b")
plot(a$Ozone)
lines(a$Ozone)
a$Ozone
plot(a$Ozone)
lines(a$Ozone)
hist(a$Ozone)
boxplot(x)
boxplot(a$Ozone)
read.table(data3.dat)
x = scan("data3.dat"); x
x = scan("data3.dat"); x
read.table("data3.dat")
b = read.table("data3.dat")
plot(b$V1, b$V2)
plot(b$V1, b$V2, xlab = "V1", ylab = "V2")
plot(b$V2, b$V1, xlab = "V2", ylab = "V1")
plot(b$V1, b$V2, range(14:25))
plot(b$V2, b$V1, xlab = "V2", ylab = "V1")
hist(b)
plot(b$V1, b$V2, xlab = "V1", ylab = "V2")
as.numeric(b$V1)
hist(b)
hist(as.numeric(b$V1))
hist(as.numeric(b))
class(V1)
class(b$V1)
class(b$V2)
class(b$V3)
plot(b$V1, b$V2, xlab = "V1", ylab = "V2")
plot(b)
View(b)
b = read.table("data3.dat", header = 1)
plot(b)
hist(b)
class(b$V1)
hist(b$x)
class(b$x)
class(b$y)
class(b$z)
plot(b)
hist(b$x)
plot(a$Ozone)
plot(a$Ozone, type = "l")
plot(a$Ozone, type ="l")
plot(b$,b$y)
plot(b$x,b$y)
summary(b)
dnorm(1,mean=0,sd=1)  # density function for normal dist. with mean 3 and sd 5 evaluated at 1
pnorm(1,mean=0,sd=1)  # Distribution function
curve(dnorm(x, mean=0, sd=1),from=-5,to=5)  # x must be called x in curve
curve(pnorm(x, mean=0, sd=1),from=-5,to=5)
qnorm(0.8,mean=0,sd=1)
rnorm(5,mean=0,sd=1)  # 5 simulations
hist(rnorm(1000,mean=0,sd=1))  # histogram of 1000 simulations
curve(dgamma(x,shape = 3,rate=0.5),from=0,to=20)
?t
?distribution
curve(dt(x, df = 3))
curve(pt(x, df = 3))
rt(50, df=3)
hist(rt(50, df=3))
?curve
hist(rt(50, df=3))
curve(rt(x, 50, df=3))
hist(rt(50, df=3))
curve(rt(x, 50, df=3, add = TRUE))
curve(rt(x, 50, df=3, add = TRUE))
hist(rt(50, df=3))
hist(rt(50, df=3))
hist(rt(50, df=3), add = TRUE)
curve(rt(x, 50, df=3))
hist(rt(50, df=3), add = TRUE)
curve(dt(x, df = 3))
curve(pt(x, df = 3))
hist(rt(50, df=3),curve(rnorm(x, 50, 0, 1 add = TRUE)) )
hist(rt(50, df=3),curve(rnorm(x, 50, 0, 1, add = TRUE)) )
hist(rt(50, df=3, add = TRUE),curve(rnorm(x, 50, 0, 1)) )
hist(rt(50, df=3, add = TRUE))
hist(rt(50, df=3))
curve(rnorm(x, 50, 0, 1, add = TRUE))
curve(rnorm(x, 50, 0, 1))
curve(rnorm(x, 50, mean = 0, sd = 1))
curve(rnorm(x, mean = 0, sd = 1))
hist(rt(50, df=3))
curve(rnorm(x, mean = 0, sd = 1, add = TRUE))
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
hist(rt(50, df=3))
curve(rnorm(x, mean = 0, sd = 1, add = TRUE))
hist(rt(50, df=3))
curve(rnorm(mean = 0, sd = 1, add = TRUE))
curve(dnorm(x, mean = 0, sd = 1, add = TRUE))
curve(rnorm(x, 50, mean = 0, sd = 1, add = TRUE))
hist(dnorm(mean = 0, sd = 1, probability = TRUE))
hist(dnorm(mean = 0, sd = 1, probability = TRUE, add = TRUE))
hist(rt(50, df=3, probability = TRUE))
curve(rnorm(x, 50, mean = 0, sd = 1, add = TRUE))
hist(rt(50, df=3, probability = TRUE))
curve(rnorm(x, 50, mean = 0, sd = 1, add = TRUE))
hist(rt(50, df=3, probability = TRUE))
curve(dnorm(x, mean = 0, sd = 1, add = TRUE))
hist(rt(50, df=3, probability = TRUE))
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
hist(rt(50, df=3, probability = TRUE))
hist(rt(50, df=3), probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
hist(dnorm(mean = 0, sd = 1, probability = TRUE, add = TRUE))
hist(dnorm(mean = 0, sd = 1), probability = TRUE, add = TRUE)
hist(dnorm(x, mean = 0, sd = 1), probability = TRUE, add = TRUE)
hist(rt(50, df=3), probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
rt(50, df=10)
hist(rt(50, df=10), probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
hist(rt(50, df=3), probability = TRUE)
curve(dnorm(x, mean = 0, sd = 1), add = TRUE)
runif(100)
